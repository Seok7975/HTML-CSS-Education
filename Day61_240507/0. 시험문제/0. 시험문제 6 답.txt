1. (DOMContentLoaded) 이벤트는 웹 브라우저가 문서 객체를 모두 읽고 나서 실행하는 이벤트이다.
HTML5부터 추가된 이벤트이다. 이전에는 load 이벤트를 썼다.

2.   글자 조작하기

  속성 이름                         설명
  문서 객체.(textContent)             입력된 문자열을 그대로 넣습니다.
  문서 객체.(innerHTML)               입력된 문자열을 HTML 형식으로 넣습니다.

3. 3.png를 참고하여 다음 소스코드를 완성하자.

<!DOCTYPE html>
<html>
  <head>
    <title></title>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const divs = document.querySelectorAll('body > div')

        divs.forEach((div, index) => {
          console.log(div, index)
          const val = index * 10
          div.style.height = `10px`
          div.style.backgroundColor = `rgba(${val}, ${val}, ${val})`
        })
      })
    </script>
  </head>
  <body>
    <!-- div 태그 25개 -->
    <div></div><div></div><div></div><div></div><div></div>
    <div></div><div></div><div></div><div></div><div></div>
    <div></div><div></div><div></div><div></div><div></div>
    <div></div><div></div><div></div><div></div><div></div>
    <div></div><div></div><div></div><div></div><div></div>
    <div></div><div></div><div></div><div></div><div></div>
  </body>
</html>

4. 4-1.png와 4-2.png를 참고하여
h1태그를 동적으로 만들어서. 1초마다 태그의 위치를 바꾸자.

<!DOCTYPE html>
<html>
  <head>
    <title></title>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // 문서 객체 읽어들이고 생성하기
        const divA = document.querySelector('#first')
        const divB = document.querySelector('#second')
        const h1 = document.createElement('h1')
        h1.textContent = '이동하는 h1 태그'

        // 서로 번갈아가면서 실행하는 함수를 구현합니다.
        const toFirst = () => {
          divA.appendChild(h1)
          setTimeout(toSecond, 1000)
        }
        const toSecond = () => {
          divB.appendChild(h1)
          setTimeout(toFirst, 1000)
        }
        toFirst()
      })
    </script>
  </head>
  <body>
    <div id="first">
      <h1>첫 번째 div 태그 내부</h1>
    </div>
    <hr>
    <div id="second">
      <h1>두 번째 div 태그 내부</h1>
    </div>
  </body>
</html>

5. h1 태그를 3초후에 제거하는 자바스크립트를 완성하자.
<h1>제거 대상 문서 객체</h1>

<!DOCTYPE html>
<html>
  <head>
    <title></title>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        setTimeout(() => {
          const h1 = document.querySelector('h1')

	h1.parentNode.removeChild(h1)

          // document.body.removeChild(h1)
          // h1.parentNode가 document.body이므로, 이런 형태로도 제거할 수 있습니다.
        }, 3000)
      })
    </script>
  </head>
  <body>
    <hr>
    <h1>제거 대상 문서 객체</h1>
    <hr>
  </body>
</html>

6. 6-1.png, 6-2.png, 6-3.png를 참고하여 이벤트 연결 버튼을 클릭하면
클릭 횟수를 클릭했을 때 카운트가 올라가게 하고 단락태그에는 
"이벤트 연결 상태 : 연결" 이라고 출력한다.
이벤트 제거 버튼을 클릭하면 클릭횟수를 클릭해도 카운트가 올라가지 않게 하고
단락태그에는 "이벤트 연결 상태 : 해제"라고 출력한다.


<!DOCTYPE html>
<html>
  <head>
    <title></title>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        let counter = 0
        let isConnect = false

        const h1 = document.querySelector('h1')
        const p = document.querySelector('p')
        const connectButton = document.querySelector('#connect')
        const disconnectButton = document.querySelector('#disconnect')

        const listener = (event) => {
          h1.textContent = `클릭 횟수: ${counter++}`
        }

        /*
          이벤트를 제거하려면 이벤트 리스너를 변수 또는 상수로
          가지고 있어야 합니다.
        */

        connectButton.addEventListener('click', () => {
          if (isConnect === false) {
            h1.addEventListener('click', listener)
            p.textContent = '이벤트 연결 상태: 연결'
            isConnect = true
          }
        })
        disconnectButton.addEventListener('click', () => {
          if (isConnect === true) {
            h1.removeEventListener('click', listener)
            p.textContent = '이벤트 연결 상태: 해제'
            isConnect = false;
          }
        })
      })
    </script>
    <style>
      h1{
        /* 클릭을 여러 번 했을 때
           글자가 선택되는 것을 막기 위한 스타일 */
        user-select: none;
      }
    </style>
  </head>
  <body>
    <h1>클릭 횟수: 0</h1>
    <button id="connect">이벤트 연결</button>
    <button id="disconnect">이벤트 제거</button>
    <p>이벤트 연결 상태: 해제</p>
  </body>
</html>


<!--
  이벤트를 제거할 때는 다음과 같은 형태로 removeEventListener() 메소드를 사용합니다.

  문서객체.removeEventListener(이벤트 이름, 이벤트 리스너)
-->