웹 브라우저를 다루는 방법, 브라우저 객체 모델

자바스크립트를 사용하면 웹 브라우저에서 특정한 사이트로 이동하거나 새로운 웹 브라우저 창을 여는 등 웹 브라우저 창과 관련된 여러 가지 효과를 만들 수 있습니다. 이런 작업이 가능한 것은 자바스크립트 내에 웹 브라우저와 관련된 여러 객체가 미리 정의되어 있기 때문입니다.

브라우저 객체 모델
웹 '문서'에 삽입된 각 요소를 객체로 인식하고 조작하는 것을 '문서 객체 모델(DOM)'이라고 했죠? 마찬가지로 웹 '브라우저' 전체를 객체로 관리하는 것을 '브라우저 객체 모델(Browser Object Model)'이라고 합니다. 브라우저 객체 모델은 자바스크립트 프로그램을 통해 브라우저 창을 관리할 수 있도록 브라우저 요소를 객체화해 놓은 것을 가리킵니다.

브라우저 창이 열리면 가장 먼저 Window 객체가 만들어지고, 그 하위에 브라우저 각 요소에 해당하는 객체가 만들어집니다. 이들 하위 객체는 웹 문서와 주소 표시줄처럼 브라우저의 각 요소에 해당하는 객체이며 각각 또 다른 하위 객체를 가지고 있습니다.

다음은(브라우저 객체 모델.png) 최상위에 있는 Window 객체를 시작으로 하는 객체 모델 계층도이다. 웹 문서에 해당하는 Document 객체는 웹 문서를 관리하고 수정할 때 '문서 객체 모델'을 사용합니다.


다음 표는 자주 사용하는 브라우저 내장 객체를 간단히 정리한 것이다.

객체		설명
Window		브라우저 창이 열릴 때마다 하나씩 만들어지는 객체입니다. 브라우저 창 안에 존재하는 모든 요소의 최상위 객체입니다.
Document		웹 문서에서 <body> 태그를 만나면 만들어지는 객체입니다. HTML 문서 정보를 가지고 있습니다.
History		현재 창에서 사용자의 방문 기록을 저장하고 있는 객체입니다.
Location		현재 페이지에 대한 URL 정보를 가지고 있는 객체입니다.
Navigator		현재 사용중인 웹 브라우저 정보를 가지고 있는 객체입니다.
Screen		현재 사용 중인 화면 정보를 다루는 객체입니다.

웹 브라우저를 제어하는 Window 객체 

자바스크립트의 Window 객체는 웹 브라우저 창의 상태를 제어하는 객체로, 자바스크립트 객체 중 최상위이자 기본이 되는 객체입니다. 즉 자바스크립트의 모든 객체는 Window 객체에 포함되죠.

팝업 창 표시하기

Window 객체의 속성 알아보기
Window 객체에는 웹 브라우저 창과 관련된 여러 가지 속성이 있다. 이 속성에 접근해 브라우저 창의 정보를 가져올 수도 있고, 필요하면 값을 바꿀 수도 있다. 속성에 접근하는 방법은 다른 객체와 마찬가지로 객체 이름 뒤에 마침표(.)와 속성 이름을 붙이면 된다. 다음 표는 자주 사용하는 속성이며 모든 브라우저에서 호환된다.
(Window 객체의 모든 속성과 브라우저 호환여부에 대해서는 developer.mozilla.org/ko/docs/Web/API/Window를 참조하세요.)

b1.png 참고

Window 객체의 몇 가지 속성을 확인해 보자. 웹 브라우저를 실행한 후 주소 표시줄에 about:blank를 입력해서 빈 문서로 들어간 다음 콘솔 창을 연다. 그리고 다음과 같이 입력해 보자. innerWidth와 innerHeight는 웹 사이트 내용 부분의 너비와 높이를 나타내고, outerWidth와 outerHeight는 웹 브라우저의 메뉴나 도구 모음 등까지 포함된 너비와 높이를 나타낸다. 콘솔 창에 표시되는 너비나 높이 값은 열려 있는 브라우저 창의 크기에 따라 달라진다.

b2.png 참고

Window 객체의 함수 알아보기
Window 객체에서 사용할 수 있는 함수는 대화 창을 표시하거나 브라우저 창의 크기나 위치를 알아내고 지정하는 등 웹 브라우저 창 자체와 관련된 것이 대부분이다.

alert() 함수나 prompt() 함수는 사실 Window 객체의 함수이다. 객체의 함수 표기법에 따르면 window.alert()라고 입력해야 사용할 수 있지만, Window 객체는 기본 객체이기 때문에 window. 를 생략하고 alert()만 입력해도 사용할 수 있습니다. Window 객체의 다른 함수도 똑같이 window.를 생략한 채 함수 이름만으로 사용할 수 있습니다.

Window 객체에서 자주 사용하는 함수

b2.png 참고

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

모달 창이 무엇인가요?

모달 창(Modal Window)이란 이벤트 정보나 공지 내용 등을 표시하기 위해 현재 브라우저 창 위에 띄우는 새로운 창을 말한다. 일반적인 알림 창이 웹 브라우저 창을 새로 여는 것이라면 모달 창은 문서 소스 안에 <div> 태그를 사용해 삽입하고 레이어로 표시한 창이다. 따라서 웹 브라우저에서 알림 창을 차단하더라도 모달 창은 화면에 표시할 수 있다.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

새 창을 여는 open() 함수
링크를 누르거나 웹 문서를 불러오자마자 자동으로 새 창이 뜨는 동작은 Window 객체의 open() 함수를 사용한다. open() 함수를 사용하면 현재 창이나 새 탭, 새로운 알림 창 등 다양한 형태로 새 창을 열 수 있다.
웹 브라우저에 빈 문서를 열고 콘솔 창을 열자.

window.open("https://www.daum.net");

첫 번째 매개변수에 빈 따옴표만 넣는다면 빈 문서가 열린다.

window.open("");

open() 함수의 두 번째 매개변수는 새 창의 타깃(Target)이나 윈도우 이름을 지정하는 부분이다. 두 번째 매개변수에 아무 값도 없이 빈 따옴표만 넣을 경우에도 역시 새 탭에 Daum 사이트가 표시된다.

window.open("https://www.daum.net", "");

두 번째 매개변수 값을 "_self"로 지정하면 현재 창에 새 창이 표시된다.

window.open("https://www.daum.net", "_self");

open() 함수의 세 번째 매개변수는 알림 창으로 표시할 때의 너비나 높이, 위치 등을 지정하는 옵션입니다. 콘솔 창에 다음과 같이 입력하면 알림 창에 Daum(www.daum.net) 사이트를 표시하는데, 화면 왼쪽 위(left=0, top=0)에 너비 300px, 높이 300px 크기로 열립니다.

window.open("https://www.daum.net", "", "left=0, top=0, width=300, height=300");

다음은 마지막 매개변수에 전달한 height, width, left, top 정보를 정리한 것이다.

height	px 값	알림 창의 높이를 지정합니다. 최솟값은 100입니다.
width	px 값	알림 창의 너비를 지정합니다. 최솟값은 100입니다.
left	px 값	알림 창이 나타날 x 좌표의 위치를 지정합니다. 화면의 왼쪽 가장자리를 기준으로 나타나기 때문에 이름이 left입니다.
top	px 값	알림 창이 나타날 y 좌표의 위치를 지정합니다. 화면의 위쪽 가장자리를 기준으로 나타나기 때문에 이름이 top입니다.

크기를 조절하는 resizeBy(), resizeTo() 함수
open 함수로 열린 알림 창의 크기를 조절할 때는 resizeBy() 함수와 resizeTo() 함수를 사용한다. 먼저 resizeBy() 함수를 알아볼까요? resizeBy()는 현재 브라우저 창의 크기를 기준으로 너비와 높이에 값을 더해 준다. 즉 기존 창의 너비 값과 높이 값에 입력한 값을 각각 더해 브라우저 창의 크기를 새로 지정하는 것이죠.

웹 브라우저 창을 열고 빈 문서를 만듭니다.

var newWin = window.open(" ", " ", "width=300, height=300"); //단위를 안쓰면 mm

알림 창의 크기를 가로로 100픽셀, 세로로 100픽셀씩 늘리려면 다음과 같이 resizeBy() 함수를 사용합니다. 또한 resizeBy(-100, -100) 처럼 음수를 사용하면 가로와 세로 길이가 100픽셀씩 줄어 원래 크기로 돌아옵니다.

newWin.resizeBy(100, 100);
newWin.resizeBy(-100, -100);

resizeTo() 함수는 최종 크기를 지정합니다. 즉 알림 창의 크기를 가로와 세로 각각 200픽셀로 지정하려면 콘솔 창에 다음과 같이 입력하면 된다. resizeBy() 함수에서는 음수 값을 사용할 수 있지만 resizeTo() 함수에서는 음수 값을 사용할 수 없습니다.

newWin.resizeTo(200, 200);

위치를 조절하는 moveBy(), moveTo() 함수
열려 있는 알림 창의 위치를 조절하고 싶다면 moveBy() 함수나 moveTo() 함수를 사용할 수 있다. moveBy() 함수와 moveTo()함수는 모두 x크기와 y크기를 매개변수로 사용하는데, moveBy() 함수는 현재 위치를 기준으로 가로로 x픽셀만큼, 세로로 y픽셀만큼 옮기지만, moveTo() 함수는 화면의 왼쪽 위 모서리를 기준으로 가로로 x픽셀만큼, 세로로 y픽셀만큼 옮깁니다.(moveTo() 함수는 현재 브라우저 위치와 상관없이 괄호 안에 지정한 x좌표, y좌표로 브러우저 창을 옮긴다고 생각하면 쉽습니다.

알림 창이 열려 있는 상태에서 콘솔 창에 다음과 같이 입력해 보세요. moveBy() 함수를 사용했으므로 현재 위치에서 가로로 500픽셀만큼, 세로로 500픽셀만큼 이동합니다.

newWin.moveBy(500, 500);

알림 창을 화면 왼쪽 위로 옮기고 싶다면 다음과 같이 moveTo() 함수를 사용해서 좌푯값(0, 0)으로 옮깁니다.

newWin.moveTo(0, 0);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

함수 문법 살펴보기

각 객체에는 여러 가지 함수가 있고 함수마다 사용하는 매개변수가 다릅니다. 
그래서 자주 사용하지 않는 함수의 사용 방법까지 전부 기억하기는 어렵습니다. 
처음 사용하는 함수의 기능이 궁금하거나 좀 더 자세한 사용법을 알고 싶다면 
함수 문법(Syntax)을 확인하면 됩니다. 
예를 들어 Window 객체의 함수는 
developer.mozilla.org/ko/docs/Web/API/Window#Methods 에서 찾을 수 있습니다. 
이 사이트에 접속한 후 window.open() 함수를 찾아 이름을 눌러 보세요. 
함수 이름이 알파벳순으로 되어 있으니 함수 이름만 알면 찾기 어렵지 않습니다.

문법(Syntax) 항목을 보면 window.open() 함수에서 사용하는 매개변수를 볼 수 있습니다. 
매개변수 중 대괄호([])로 묶인 부분은 
사용할 수도 있고 사용하지 않을 수도 있는 변수입니다.
화면을 아래로 내리면 해당 함수를 사용한 예제 소스가 있습니다. 
이 소스를 참고해서 직접 예제 소스를 작성하며 함수 사용법을 익힐 수도 있습니다.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// main-result.html
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

<!DOCTYPE html>

<html lang="ko">
<head>
    <meta charset="utf-8" />
    <title>팝업 창 표시하기</title>    
 </head>
<body>
    <p>이 문서가 열리면 자동으로 팝업 창이 표시됩니다.</p>
    <script src="js/popup-result.js"></script>
</body>
</html>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

popup-result.js

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function openPop() {
    var newWin = window.open("\popup-result.html", "", "width=400, height=400");
    if(newWin == null) {
      alert("팝업이 차단되어 있습니다. 팝업 차단을 해제하고 새로고침해 주세요.");
    }
}
        
window.onload = openPop;
// <body onload="openPop()">라고 작성해도 됩니다.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

팝업 창을 사용할 때 한 가지 고려해야 할 것은 
크롬 웹 브라우저가 기본으로 팝업을 차단하기 때문에 
팝업 차단 상태인지 확인해야 한다는 점입니다. 
웹 브라우저에서 팝업을 차단하면 
window.open()은 null을 반환하기 때문에 반환 값을 확인해서 
팝업이 차단되었는지 알아낼 수 있습니다.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

<p id="close"><a href="javascript:window.close();">창닫기</a></p>
또는 <a href="#" onclick="javascript:window.close();">창닫기</a> 
처럼 사용할 수도 있습니다. 
하지만 태그 안에 자바스크립트 소스를 사용하는 것은 
소스 관리를 어렵게 하므로 자주 사용하지 않는 것이 좋습니다.

브라우저 정보가 담긴 Navigator 객체

Navigator 객체에는 웹 브라우저와 관련된 정보가 담겨 있습니다. 
웹 브라우저 버전을 비롯해 웹 브라우저에 어떤 플러그인이 설치되어 있는지, 
웹 브라우저가 온라인 상태인지 오프라인 상태인지 등 다양한 정보가 있죠. 
그래서 Navigator 객체를 사용하면 현재 웹 문서에 접속한 사용자가 
크롬 브라우저를 사용했는지, 익스플로러를 사용했는지, 
혹은 모바일로 접속했는지 등의 정보를 알 수 있습니다. 
이런 정보를 알게 되면 프로그램을 만들 때 방문자의 접속 브라우저에 
맞춘 자바스크립트를 적용할 수 있겠죠?

렌더링 엔진이란?
Navigator 객체는 렌더링 엔진의 이름을 보고 웹 브라우저 종류를 구별합니다. 
렌더링 엔진이란 무엇일까요? 
렌더링 엔진(Rendering Engine)이란 브라우저에서 웹 문서를 화면에 표시하기 위해 
웹 문서의 태그와 스타일을 해석하는 프로그램입니다. 
웹 브라우저마다 내장된 렌더링 엔진이 다르기 때문에 
HTML이나 CSS를 해석하는 방법이 다릅니다. 
그래서 표준화되지 않은 CSS3 속성 앞에 -webkit- 또는 -oz- 같은 접두어(Prefix)를 
붙여서 사용자가 접속한 브라우저에 맞게 렌더링합니다.
(렌더링 엔진은 레이아웃 엔진(Layout Engine)이라고도 합니다.)

웹 브라우저에는 자바스크립트 소스를 해석하는 
자바스크립트 엔진도 내장되어 있는데, 이것 역시 웹 브라우저마다 다릅니다. 
사용하는 자바스크립트 엔진에 따라 
웹 브라우저의 자바스크립트 처리 성능이 달라지기 때문에 
해당 웹 브라우저가 어떤 자바스크립트 엔진을 사용하는지는 
기본으로 알아 두는 게 좋습니다. 
다음은 각 브라우저에 내장된 렌더링 엔진과 자바스크립트 엔진입니다.
(Webkit 엔진은 Apple이 오픈 소스로 개발하는
렌더링 엔진이라서 AppleWebkit으로 표시됩니다.)

브라우저별 렌더링 및 자바스크립트 엔진

브라우저				렌더링 엔진		자바스크립트 엔진
크롬(Chrome)			블링크(Blink)		V8
파이어폭스(Firefox)			게코(Gecko)		스파이더몽키(SpiderMonkey)
인터넷 익스플로러(Internet Explorer)	트라이덴트(Tident)		차크라(Chakra)
사파리(Safari)			웹킷(Webkit)		자바스크립트코어(JavascriptCore)
오페라(Opera)			블링크(Blink)		V8

어떤 엔진을 사용하고 있는지 직접 확인해 볼 수도 있습니다. 크롬 브라우저에서 확인해 보겠습니다. 주소 표시줄에 chrome://version/을 입력해 보세요. 사용하는 엔진 정보를 알 수 있습니다. 크롬 브라우저는 웹킷(Webkit) 렌더링 엔진을 사용하고 있었지만 버전 28 이후에 블링크(Blink)라는 렌더링 엔진으로 바꿨고, 자바스크립트 엔진은 구글에서 자체 개발한 V8 엔진을 사용합니다. 블링크 엔진도 기존의 웹킷 엔진을 기반으로 하고 있기 때문에 크롬의 렌더링 엔진은 'AppleWebkit'으로 표시됩니다.

Navigator 객체의 속성 알아보기

Navigator 객체는 브라우저 버전이나 플랫폼(os) 정보를 가지고 있다. 
이 정보는 사용자가 수정할 수 없고 볼 수만 있다.

크롬 브라우저 에서 콘솔 창을 열고 navigator라고 입력해 보자. 
그리고 Navigator 왼쪽의 ▶를 누르면 Navigator 객체의 모든 정보가 한눈에 표시된다.

Navigator 객체의 여러 가지 속성
사용할 수 있는 브라우저가 많아지고 
웹 애플리케이션이 등장하면서 Navigator 객체에는 진동 감지 속성이나 
배터리 상태를 체크하는 속성 등 새로운 속성이 계속 추가되고 있다.
(Navigator 객체의 모든 속성 목록을 보려면 
developer.mozilla.org/ko/docs/Web/API/Navigator를 참고하세요.

다음은 Navigator 객체의 주요 속성이다. 
일부 브라우저에서만 지원하는 속성은 제외했다.
b3.png 참고

browser.html을 열어 화면에서 보자.

사용자 에이전트 문자열로 자바스크립트 엔진 확인하기
Navigator 객체 정보 중 userAgent 속성을 보면 
사용자의 웹 브라우저 버전은 물론 어떤 자바스크립트 엔진을 
사용하는지 등의 정보도 알 수 있습니다.

사용자 에이전트(User Agent) 문자열은 
클라이언트에서 서버로 정보를 보낼 때 클라이언트에서 함께 보내는 정보로, 
서버에서는 이 정보를 보고 브라우저 종류를 확인한 후 
그 브라우저에 맞게 웹 페이지를 표시합니다. 
이 정보는 navigator.userAgent에 포함되어 있습니다.

예를 들어 웹 사이트를 제작하는 경우에 
인터넷 익스플로러 11 사용자가 웹 사이트에 접속했을 때 
사용자에게 크롬 브라우저로 접속하라고 사이트에서 알려 줘야 한다면, 
인터넷 익스플로러 11의 사용자 에이전트 문자열이 어떤 것인지 알고 있어야 합니다. 
접속한 사용자 웹 브라우저 navigator.userAgent 값을 확인한 후 
인터넷 익스플로러 11 값과 같은지 확인해야 하니까요. 
이렇게 navigator.userAgent에 들어 있는 정보는 웹 브라우저마다 다르고, 
같은 웹 브라우저라도 버전마다 다를 수 있습니다.

인터넷 익스플로러
인터넷 초창기에는 '넷스케이프 내비게이터' 웹 브라우저를 많이 사용했기 때문에, 
후발 주자인 인터넷 익스플로러는 넷스케이프 사용자 에이전트 문자열과 호환되도록 
넷스케이프 내비게이터에서 사용하는 Mozilla 키워드를 함께 사용했습니다. 
그리고 인터넷 익스플로러 11에서는 트라이덴트(Trident)엔진을 사용하기 때문에 
문자열에 그 내용도 포함되어 있습니다.

최종 버전인 인터넷 익스플로러 11의 사용자 에이전트 문자열은 다음과 같습니다.

Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko

엣지
윈도우용 마이크로소프트 엣지 버전 12.246의 사용자 에이전트 문자열은 다음과 같습니다. 
사용자 에이전트 문자열에 Chrome과 Safari, Edge가 모두 있습니다. 
그래서 크롬 브라우저나 사파리 브라우저보다 먼저 엣지 브라우저를 체크해야 합니다. 
엣지 브라우저를 체크할 때는 사용자 에이전트 문자열에 Edge가 있는지 확인하면 됩니다.

Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.61 Safari/537.36 Edge/94.0.992.31

엣지나 크롬, 사파리 브라우저에서 사용하는 웹킷(Webkit) 엔진은 
오픈 소스 렌더링 엔진인 KHTML에서 시작되었기 때문에 
사용자 에이전트 문자열에 KHTML 엔진 이름이 함께 표시됩니다. 
그리고 문자열에 있는 like Gecko는 
게코 엔진을 사용하는 예전 웹 브라우저와 호환이 된다고 알려 주는 것입니다.

크롬
윈도우용 크롬 브라우저 버전 6의 사용자 에이전트 문자열은 다음과 같습니다. 따라서 크롬 브라우저는 사파리 브라우저보다 먼저 체크해야 합니다. 크롬 브라우저인지 체크하려면 사용자 에이전트 문자열에 Chrome 문자열이 있는지 확인합니다.

Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebkit /537.36(KHTML, like Gecko) Chrome/94.0.4606.61 Safari/537.36

사파리, 오페라
맥용 사파리 브라우저 9.1의 사용자 에이전트 문자열은 다음과 같다. 
맥용 사파리 브라우저인지 확인하려면 Safari 문자열이 있는지 확인하면 된다.

Mozill/5.0(Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/601.7.7 (KHTML, like Gecko) Version/9.1.2 Safari/601.7.7

위에서 설명한 브라우저 외의 브라우저나, 
한 브라우저에서도 여러 버전의 사용자 문자열을 알고 싶다면 
www.useragentstring.com/pages/useragentstring.php 에 접속한 후 
[Browsers]열에서 원하는 브라우저 이름을 선택한다. 
예를 들어 [Internaet Explorer]를 선택하면 
인터넷 익스플로러 브라우저 버전에 따라 
다양한 사용자 에이전트 문자열을 확인할 수 있고, 
사용자 에이전트 문자열을 누르면 각 항목에 대한 설명도 볼 수 있습니다. 

browserCheck.html 문서에는 사용자 에이전트 문자열을 사용해 
웹 브라우저 종류를 확인하는 소스가 들어 있다.

b4.png 참고

그 밖의 브라우저 객체들

History 객체 간단히 살펴보기
History 객체에는 브라우저에서 
'뒤로', '앞으로' 또는 주소 표시줄에 입력해서 돌아다녔던 
사이트 주소가 저장되어 있다. 보안 때문에 브라우저에 있는 
브라우저 히스토리는 읽기 전용입니다. 이 객체에서 사용할 수 있는 함수는 
방문하면서 History 객체에 저장된 URL을 앞뒤로 이동하는 것입니다. 
History 객체의 속성과 함수는 다음과 같습니다.

History 객체의 속성과 함수

속성		설명
length		현재 브라우저 창의 History 목록에 잇는 항목의 개수, 즉 방문한 사이트 개수를 반환합니다.

함수		설명
back()		History 목록에서 이전 페이지를 현재 화면에 불러옵니다.
forward()		History 목록에서 다음 페이지를 현재 화면에 불러옵니다.
go()		History 목록에서 현재 페이지를 기준으로 상대 위치에 있는 페이지를 현재 화면에 불러옵니다. 예를 들어 history.go(1)은 다음 페이지를 가져오고, history.go(-1)은 이전 페이지를 불러옵니다.

Location 객체 간단히 살펴보기
Location 객체는 이름에서도 알 수 있듯이 브라우저의 주소 표시줄과 관련되어 있습니다. 
즉 현재 문서의 URL 주소 정보를 가지고 있는데, 
이 정보를 편집하면 현재 브라우저 창에 열릴 사이트나 문서를 지정할 수 있습니다. 
다음은 Location 객체의 속성과 함수입니다.

Location 객체의 속성과 함수

속성		설명
hash		URL 중 #로 시작하는 해시 부분을 나타냅니다.
host		URL의 호스트 이름과 포트 번호를 나타냅니다.
hostname		URL의 호스트 이름을 나타냅니다.
href		전체 URL입니다. 이 값을 변경하면 해당 주소로 이동할 수 있습니다.
pathname		URL 경로를 나타냅니다.
port		URL의 포트 번호를 나타냅니다.
protocol		http://나 ftp:// 같은 URL의 프로토콜을 나타냅니다.
password		도메인 이름 앞에 username과 password를 함께 입력해서 접속하는 URL일 경우 password 정보를 저장합니다.
search		URL 중 ?(물음표)로 시작하는 검색 내용 부분을 나타냅니다.
username		도메인 이름 앞에 username을 함께 입력해서 접속하는 사이트 URL일 경우 username 정보를 저장합니다.

함수		설명
assign()		현재 문서에 새 문서 주소를 할당해 새 문서를 가져옵니다.
reload()		현재 문서를 다시 불러옵니다. 브라우저의 [새로 고침]과 같은 역할을 합니다.
replace()		현재 문서의 URL을 지우고 다른 URL의 문서로 교체합니다.
toString()		현재 문서의 URL을 문자열로 반환합니다.

locationObject.html 문서 열어보기

Screen 객체 간단히 살펴보기 
=> 반응형 객체를 만들기 위해선 Screen 객체를 유용하게 쓰기에 좋다.
웹 사이트에 접속하는 사용자의 화면 크기는 모두 다른데, 
화면 크기나 정보를 알고 싶다면 Screen 객체를 사용하면 됩니다. 
Screen 객체는 주로 화면 정보를 알아낼 때 많이 사용하는 객체입니다. 
여기에서 '화면은' PC 모니터나 모바일 기기의 화면 자체를 말합니다. 
다음 표는 Screen 객체의 속성입니다.

Screen 객체의 속성과 함수

속성		설명
availHeight	화면에서 윈도우의 작업 표시줄이나 맥의 메뉴/독 같은 UI 영역을 제외한 부분의 높이를 나타냅니다.
availWidth		UI 영역을 제외한 부분의 너비를 나타냅니다.
colorDepth	화면상에서 픽셀을 렌더링할 때 사용하는 색상 수를 나타냅니다.
height		UI 영역을 포함한 화면의 높이를 나타냅니다.
orientation	화면의 현재 방향을 나타냅니다. 기본은 가로 방향입니다.
pixelDepth	화면상에서 픽셀을 렌더링할 때 사용하는 비트 수를 나타냅니다.
width		UI 영역을 포함한 화면의 너비를 나타냅니다.

함수		설명
lockOrientation()	화면 방향을 잠급니다.
unlockOrientation()	화면 방향 잠금을 해제합니다.

Screen 객체에서 사용하는 함수는 
화면 방향을 잠그거나 잠근 화면 방향을 해제합니다. 
이 두 가지 함수는 풀스크린 상태일 때나 방향 전환이 가능한 앱에서 사용할 수 있습니다.

screenObject.html 문서는 Screen 객체와 Window 객체를 통해 
화면과 창의 너비/높이 관련 속성을 알아본 것입니다. 
여기에서 주의할 것은 Window 객체의 
innerWidth/innerHeight나 outerWidth/outerHeight 속성은 
웹 브라우저 창의 너비나 높이를 측정하고, 
Screen 객체의 availWidth/availHeight나 width/height 속성은 
화면 자체의 너비나 높이를 측정한다는 것입니다. 
웹 브라우저 창의 크기를 늘리거나 줄인 후 [새로 고침]을 눌러 보세요. 
Window 객체의 속성 값은 바뀌지만, Screen 객체의 속성 값은 바뀌지 않습니다.