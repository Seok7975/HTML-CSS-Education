1. Rectangle 클래스를 만들자.
생성자에서 밑변과 높이를 초기화해주자.
사각형의 둘레를 구해서 리턴하는 메소드
사각형의 넓이를 구해서 리턴하는 메소드

밑변이 10, 높이가 20인 사각형 객체를 만들자.
사각형의 둘레와 사각형의 넓이를 구해서 콘솔에 출력하자.

2. 1번에서만든 Rectangle 클래스를 상속하는 Square 클래스를 만들자.
Square 클래스는 정사각형을 형상화한 클래스이다.
생성자를 만드는데 매개변수를 하나받고 상위클래스의 생성자를 호출하도록 하자.
한변의 길이가 10인 Square 객체를 만들자.
그 객체의 둘레와 넓이를 구해서 출력하자.

3. 길이가 0보다 작으면 생성자에서 예외를 발생시키도록 하자

      // 정사각형 클래스
      class Square {
        constructor (length) {
            // 예외발생 코드 추가
          this.length = length
        }
        getPerimeter () { return 4 * this.length }
        getArea () { return this.length * this.length }
      }

      // 클래스 사용하기
      const square = new Square(-10)
      console.log(`정사각형의 둘레: ${square.getPerimeter()}`)
      console.log(`정사각형의 넓이: ${square.getArea()}`)

4. 정사각형 클래스 Square를 만들자.
한 변의 길이를 나타내는 속성을 private으로 선언하자.
생성자와 사각형의 둘레를 리턴하는 메소드, 사각형의 면적을 리턴하는 메소드를 만들자.

한변의 길이가 10인 정사각형 객체를 만들고 정사각형의 둘레와 넓이를 구하여 출력하자.

5. 정사각형 클래스를 만들자
정사각형의 변의 길이를 private으로 선언한자.
생성자에서 변의 길이를 초기화하자.세터메소드가 호출되도록 하자.
게터메소드와 세터메서드로 변의 길이를 반환하고 변의 길이를 대입하도록하자.
세터메소드에서 변의 길이가 0보다 작으면 예외를 발생시키자.
변의 길이가 10인 사각형 객체를 만들자. 변의 길이, 둘레, 넓이를 출력하자.
한변의 길이가 -10인 객체를 만들자.그리고 예외가 발생하도록 하자.

6. Square 클래스를 만든다.(정사각형을 형상화한 클래스)
length를 private으로 선언한다.
counter를 정적 private으로 선언한다.   
counter를 반환하는 정적 메소드를 만든다.
생성자에서 length를 초기화한다.
생성자에서 counter를 1증가시킨다.   
정사각형의 둘레를 구하는 정적 메소드를 만든다.
정사각형의 면적을 구하는 정적 메소드를 만든다.
길이를 반환하는 메소드를 만든다.
둘레를 반환하는 메소드를 만든다.
면적을 반환하는 메소드를 만든다.
길이값을 설정하는 세터메소드를 만든다. 길이가 0보다 작으면 예외를 발생시킨다.
Square 객체 3개를 생성한다.
객체의 갯수를 출력한다.
정적메소드로 길이가 20인 사각형의 둘레를 구한다.
정적메소드로 길이가 30인 사각형의 면적을 구한다.

  7. 메소드 오버라이딩의 정의와 예시를 드시오.

  8. 다음 코드의 실행 결과를 적으시오.

      // 클래스를 선언합니다.
      class LifeCycle {
        call () {
          this.a()
          this.b()
          this.c()         
        }

        a () { console.log('a() 메소드를 호출합니다.')}
        b () { console.log('b() 메소드를 호출합니다.')}
        c () { console.log('c() 메소드를 호출합니다.')}
      }

      class Child extends LifeCycle {
        a () {
          console.log('자식의 a() 메소드입니다.')
        }
      }

      // 인스턴스를 생성합니다.
      new Child().call()

  9. 다음 코드의 실행결과를 적으시오.

  // 클래스를 선언합니다.
      class LifeCycle {
        call () {
          this.a()
          this.b()
          this.c()         
        }

        a () { console.log('a() 메소드를 호출합니다.')}
        b () { console.log('b() 메소드를 호출합니다.')}
        c () { console.log('c() 메소드를 호출합니다.')}
      }

      class Child extends LifeCycle {
        a () {
          super.a()
          console.log('자식의 a() 메소드입니다.')
        }
      }

      // 인스턴스를 생성합니다.
      new Child().call()    

10. 모든 클래스의 최상위 클래스는?

11. 10번 클래스의 toString() 메소드를 메소드 오버라이딩하는 예시를 작성하시오.