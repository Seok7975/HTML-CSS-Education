1. 다음 객체에 name 속성이 있는지 체크합니다. 다음 객체에 author 속성이 있는지 체크합니다.
      const object = {
        name: '혼자 공부하는 파이썬',
        price: 18000,
        publisher: '한빛미디어'
      }

2. 다음 객체에 name 속성이 없다면, 동적으로 name 속성을 주고 그 값을 '제목 미정'이라고 줍니다.
다음 객체에 author 속성이 없다면, 동적으로 author 속성을 주고 그 값을 '저자 미상'라고 줍니다.
그리고 obejct 객체를 출력해봅니다.

      const object = {
        name: '혼자 공부하는 파이썬',
        price: 18000,
        publisher: '한빛미디어'
      }

3. 변수 a, b의 값에 배열 기반의 다중 할당으로 1, 2 의 값으로 초기화 합니다.

4 변수 a, b의 값을 치환합니다.

5. let arrayA = [1, 2, 3, 4, 5]
변수 a, b, c를 배열 기반의 다중할당으로 arrayA를 이용해서 arrayA[0], arrayA[1], arrayA[2]로 초기화합니다.

6. 다음 object 객체를 이용하여(객체 기반의 다중 할당) name에 object.name을 price에 object.price로 초기화하자.

      const object = {
        name: '혼자 공부하는 파이썬',
        price: 18000,
        publisher: '한빛미디어'
      }

7. 다음 object 객체를 이용하여(객체 기반의 다중 할당) a에 object.name을 b에 object.price로 초기화하자.     
      const object = {
        name: '혼자 공부하는 파이썬',
        price: 18000,
        publisher: '한빛미디어'
      }

8. 다음의 실행결과를 유추하여 적으시오.

      // 사야 하는 물건 목록
      const 물건_200301 = ['우유', '식빵']
      const 물건_200302 = 물건_200301
      물건_200302.push('고구마')
      물건_200302.push('토마토')

      // 출력
      console.log(물건_200301)
      console.log(물건_200302)

9. 8번 문제에서 물건_200302가 깊은 복사가 되게끔 구현하자.


10. 다음과 10.png와 같은 실행 결과가 나오도록 ( )에 적절한 코드를 넣자.

      // 사야 하는 물건 목록
      const 물건_200301 = ['우유', '식빵']
      const 물건_200302 = (            )

      // 출력
      console.log(물건_200301)
      console.log(물건_200302)


11. 다음과 같은 실행 결과가 나오게 코드를 완성하자.
const a = ['우유', '식빵']
const b = ['고구마', '토마토']

실행결과
(4) ['우유', '식빵', '고구마', '토마토']
(4) ['고구마', '토마토', '우유', '식빵']

12. 다음의 실행결과를 유추해서 적어보자.

      const 구름 = {
        이름: '구름',
        나이: 6,
        종족: '강아지'
      }
      const 별 = 구름
      별.이름 = '별'
      별.나이 = 1

      console.log(JSON.stringify(구름))
      console.log(JSON.stringify(별))

13. 12번을 깊은 복사가 되게 하자.

14. 다음의 출력결과를 유추하여 적어보자.

      const 구름 = {
        이름: '구름',
        나이: 6,
        종족: '강아지'
      }
      const 별 = {
        ...구름,
        이름: '별',     // 기존의 속성 덮어 쓰기
        나이: 1,        // 기존의 속성 덮어 쓰기
        예방접종: true
      }

      console.log(JSON.stringify(구름))
      console.log(JSON.stringify(별))

15. 다음의 출력결과를 유추하여 적어보자

      const 구름 = {
        이름: '구름',
        나이: 6,
        종족: '강아지'
      }
      const 별 = {
        이름: '별',
        나이: 1,
        예방접종: true,
        ...구름
      }

      console.log(JSON.stringify(구름))
      console.log(JSON.stringify(별))
